// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_accept_transport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_screen_transport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_transport_transport_2eproto;
class pb_helloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pb_hello> _instance;
} _pb_hello_default_instance_;
class pb_screenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pb_screen> _instance;
} _pb_screen_default_instance_;
class pb_acceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pb_accept> _instance;
} _pb_accept_default_instance_;
class pb_transportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pb_transport> _instance;
} _pb_transport_default_instance_;
static void InitDefaultsscc_info_pb_accept_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pb_accept_default_instance_;
    new (ptr) ::pb_accept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_accept_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pb_accept_transport_2eproto}, {}};

static void InitDefaultsscc_info_pb_hello_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pb_hello_default_instance_;
    new (ptr) ::pb_hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_pb_hello_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_pb_hello_transport_2eproto}, {
      &scc_info_pb_screen_transport_2eproto.base,
      &scc_info_pb_transport_transport_2eproto.base,
      &scc_info_pb_accept_transport_2eproto.base,}};

static void InitDefaultsscc_info_pb_screen_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pb_screen_default_instance_;
    new (ptr) ::pb_screen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_screen_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pb_screen_transport_2eproto}, {}};

static void InitDefaultsscc_info_pb_transport_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pb_transport_default_instance_;
    new (ptr) ::pb_transport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_transport_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pb_transport_transport_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transport_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_hello, transports_),
  PROTOBUF_FIELD_OFFSET(::pb_hello, screens_),
  PROTOBUF_FIELD_OFFSET(::pb_hello, accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_screen, index_),
  PROTOBUF_FIELD_OFFSET(::pb_screen, res_x_),
  PROTOBUF_FIELD_OFFSET(::pb_screen, res_y_),
  PROTOBUF_FIELD_OFFSET(::pb_screen, pixmap_),
  PROTOBUF_FIELD_OFFSET(::pb_screen, hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_accept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_accept, index_),
  PROTOBUF_FIELD_OFFSET(::pb_accept, res_x_),
  PROTOBUF_FIELD_OFFSET(::pb_accept, res_y_),
  PROTOBUF_FIELD_OFFSET(::pb_accept, pixmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_transport, flag_),
  PROTOBUF_FIELD_OFFSET(::pb_transport, max_bw_),
  PROTOBUF_FIELD_OFFSET(::pb_transport, ip_addr_),
  PROTOBUF_FIELD_OFFSET(::pb_transport, netmask_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_hello)},
  { 8, -1, sizeof(::pb_screen)},
  { 18, -1, sizeof(::pb_accept)},
  { 27, -1, sizeof(::pb_transport)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_pb_hello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_pb_screen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_pb_accept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_pb_transport_default_instance_),
};

const char descriptor_table_protodef_transport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017transport.proto\"f\n\010pb_hello\022\036\n\ntranspo"
  "rts\030\001 \003(\0132\n.pb_screen\022\036\n\007screens\030\002 \003(\0132\r"
  ".pb_transport\022\032\n\006accept\030\003 \003(\0132\n.pb_accep"
  "t\"`\n\tpb_screen\022\r\n\005index\030\001 \001(\r\022\r\n\005res_x\030\002"
  " \001(\r\022\r\n\005res_y\030\003 \001(\r\022\032\n\006pixmap\030\004 \001(\0162\n.pb"
  "_pixmap\022\n\n\002hz\030\005 \001(\r\"T\n\tpb_accept\022\r\n\005inde"
  "x\030\001 \001(\r\022\r\n\005res_x\030\002 \001(\r\022\r\n\005res_y\030\003 \001(\r\022\032\n"
  "\006pixmap\030\004 \001(\0162\n.pb_pixmap\"N\n\014pb_transpor"
  "t\022\014\n\004flag\030\001 \001(\004\022\016\n\006max_bw\030\002 \001(\004\022\017\n\007ip_ad"
  "dr\030\003 \001(\t\022\017\n\007netmask\030\004 \001(\r*J\n\tpb_pixmap\022\r"
  "\n\tz_bgr_888\020\000\022\016\n\nz_bgra_888\020\001\022\r\n\tz_rgb_8"
  "88\020\002\022\017\n\013z_rgba_8888\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_2eproto_sccs[4] = {
  &scc_info_pb_accept_transport_2eproto.base,
  &scc_info_pb_hello_transport_2eproto.base,
  &scc_info_pb_screen_transport_2eproto.base,
  &scc_info_pb_transport_transport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2eproto = {
  false, false, descriptor_table_protodef_transport_2eproto, "transport.proto", 469,
  &descriptor_table_transport_2eproto_once, descriptor_table_transport_2eproto_sccs, descriptor_table_transport_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_transport_2eproto::offsets,
  file_level_metadata_transport_2eproto, 4, file_level_enum_descriptors_transport_2eproto, file_level_service_descriptors_transport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pb_pixmap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_2eproto);
  return file_level_enum_descriptors_transport_2eproto[0];
}
bool pb_pixmap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class pb_hello::_Internal {
 public:
};

pb_hello::pb_hello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transports_(arena),
  screens_(arena),
  accept_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_hello)
}
pb_hello::pb_hello(const pb_hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transports_(from.transports_),
      screens_(from.screens_),
      accept_(from.accept_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_hello)
}

void pb_hello::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pb_hello_transport_2eproto.base);
}

pb_hello::~pb_hello() {
  // @@protoc_insertion_point(destructor:pb_hello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pb_hello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pb_hello::ArenaDtor(void* object) {
  pb_hello* _this = reinterpret_cast< pb_hello* >(object);
  (void)_this;
}
void pb_hello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pb_hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pb_hello& pb_hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pb_hello_transport_2eproto.base);
  return *internal_default_instance();
}


void pb_hello::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transports_.Clear();
  screens_.Clear();
  accept_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pb_hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_screen transports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_transport screens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_screens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_accept accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accept(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pb_hello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_screen transports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transports(i), target, stream);
  }

  // repeated .pb_transport screens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_screens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_screens(i), target, stream);
  }

  // repeated .pb_accept accept = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accept_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_accept(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_hello)
  return target;
}

size_t pb_hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_hello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_screen transports = 1;
  total_size += 1UL * this->_internal_transports_size();
  for (const auto& msg : this->transports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_transport screens = 2;
  total_size += 1UL * this->_internal_screens_size();
  for (const auto& msg : this->screens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_accept accept = 3;
  total_size += 1UL * this->_internal_accept_size();
  for (const auto& msg : this->accept_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_hello)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pb_hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_hello)
    MergeFrom(*source);
  }
}

void pb_hello::MergeFrom(const pb_hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transports_.MergeFrom(from.transports_);
  screens_.MergeFrom(from.screens_);
  accept_.MergeFrom(from.accept_);
}

void pb_hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hello::CopyFrom(const pb_hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hello::IsInitialized() const {
  return true;
}

void pb_hello::InternalSwap(pb_hello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transports_.InternalSwap(&other->transports_);
  screens_.InternalSwap(&other->screens_);
  accept_.InternalSwap(&other->accept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pb_hello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pb_screen::_Internal {
 public:
};

pb_screen::pb_screen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_screen)
}
pb_screen::pb_screen(const pb_screen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&hz_) -
    reinterpret_cast<char*>(&index_)) + sizeof(hz_));
  // @@protoc_insertion_point(copy_constructor:pb_screen)
}

void pb_screen::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hz_) -
      reinterpret_cast<char*>(&index_)) + sizeof(hz_));
}

pb_screen::~pb_screen() {
  // @@protoc_insertion_point(destructor:pb_screen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pb_screen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pb_screen::ArenaDtor(void* object) {
  pb_screen* _this = reinterpret_cast< pb_screen* >(object);
  (void)_this;
}
void pb_screen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pb_screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pb_screen& pb_screen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pb_screen_transport_2eproto.base);
  return *internal_default_instance();
}


void pb_screen::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hz_) -
      reinterpret_cast<char*>(&index_)) + sizeof(hz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pb_screen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 res_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 res_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          res_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_pixmap pixmap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pixmap(static_cast<::pb_pixmap>(val));
        } else goto handle_unusual;
        continue;
      // uint32 hz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pb_screen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 res_x = 2;
  if (this->res_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_res_x(), target);
  }

  // uint32 res_y = 3;
  if (this->res_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_res_y(), target);
  }

  // .pb_pixmap pixmap = 4;
  if (this->pixmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pixmap(), target);
  }

  // uint32 hz = 5;
  if (this->hz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_screen)
  return target;
}

size_t pb_screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_screen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 res_x = 2;
  if (this->res_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_res_x());
  }

  // uint32 res_y = 3;
  if (this->res_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_res_y());
  }

  // .pb_pixmap pixmap = 4;
  if (this->pixmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pixmap());
  }

  // uint32 hz = 5;
  if (this->hz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_screen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_screen)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_screen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pb_screen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_screen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_screen)
    MergeFrom(*source);
  }
}

void pb_screen::MergeFrom(const pb_screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.res_x() != 0) {
    _internal_set_res_x(from._internal_res_x());
  }
  if (from.res_y() != 0) {
    _internal_set_res_y(from._internal_res_y());
  }
  if (from.pixmap() != 0) {
    _internal_set_pixmap(from._internal_pixmap());
  }
  if (from.hz() != 0) {
    _internal_set_hz(from._internal_hz());
  }
}

void pb_screen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_screen::CopyFrom(const pb_screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_screen::IsInitialized() const {
  return true;
}

void pb_screen::InternalSwap(pb_screen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pb_screen, hz_)
      + sizeof(pb_screen::hz_)
      - PROTOBUF_FIELD_OFFSET(pb_screen, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pb_screen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pb_accept::_Internal {
 public:
};

pb_accept::pb_accept(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_accept)
}
pb_accept::pb_accept(const pb_accept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixmap_) -
    reinterpret_cast<char*>(&index_)) + sizeof(pixmap_));
  // @@protoc_insertion_point(copy_constructor:pb_accept)
}

void pb_accept::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pixmap_) -
      reinterpret_cast<char*>(&index_)) + sizeof(pixmap_));
}

pb_accept::~pb_accept() {
  // @@protoc_insertion_point(destructor:pb_accept)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pb_accept::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pb_accept::ArenaDtor(void* object) {
  pb_accept* _this = reinterpret_cast< pb_accept* >(object);
  (void)_this;
}
void pb_accept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pb_accept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pb_accept& pb_accept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pb_accept_transport_2eproto.base);
  return *internal_default_instance();
}


void pb_accept::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixmap_) -
      reinterpret_cast<char*>(&index_)) + sizeof(pixmap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pb_accept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 res_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 res_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          res_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_pixmap pixmap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pixmap(static_cast<::pb_pixmap>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pb_accept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 res_x = 2;
  if (this->res_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_res_x(), target);
  }

  // uint32 res_y = 3;
  if (this->res_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_res_y(), target);
  }

  // .pb_pixmap pixmap = 4;
  if (this->pixmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pixmap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_accept)
  return target;
}

size_t pb_accept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_accept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 res_x = 2;
  if (this->res_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_res_x());
  }

  // uint32 res_y = 3;
  if (this->res_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_res_y());
  }

  // .pb_pixmap pixmap = 4;
  if (this->pixmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pixmap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_accept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_accept)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_accept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pb_accept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_accept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_accept)
    MergeFrom(*source);
  }
}

void pb_accept::MergeFrom(const pb_accept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_accept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.res_x() != 0) {
    _internal_set_res_x(from._internal_res_x());
  }
  if (from.res_y() != 0) {
    _internal_set_res_y(from._internal_res_y());
  }
  if (from.pixmap() != 0) {
    _internal_set_pixmap(from._internal_pixmap());
  }
}

void pb_accept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_accept::CopyFrom(const pb_accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_accept::IsInitialized() const {
  return true;
}

void pb_accept::InternalSwap(pb_accept* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pb_accept, pixmap_)
      + sizeof(pb_accept::pixmap_)
      - PROTOBUF_FIELD_OFFSET(pb_accept, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pb_accept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pb_transport::_Internal {
 public:
};

pb_transport::pb_transport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_transport)
}
pb_transport::pb_transport(const pb_transport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_addr().empty()) {
    ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_addr(), 
      GetArena());
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&netmask_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(netmask_));
  // @@protoc_insertion_point(copy_constructor:pb_transport)
}

void pb_transport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pb_transport_transport_2eproto.base);
  ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&netmask_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(netmask_));
}

pb_transport::~pb_transport() {
  // @@protoc_insertion_point(destructor:pb_transport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pb_transport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pb_transport::ArenaDtor(void* object) {
  pb_transport* _this = reinterpret_cast< pb_transport* >(object);
  (void)_this;
}
void pb_transport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pb_transport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pb_transport& pb_transport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pb_transport_transport_2eproto.base);
  return *internal_default_instance();
}


void pb_transport::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmpty();
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netmask_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(netmask_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pb_transport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_bw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_transport.ip_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 netmask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          netmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pb_transport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_flag(), target);
  }

  // uint64 max_bw = 2;
  if (this->max_bw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_bw(), target);
  }

  // string ip_addr = 3;
  if (this->ip_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_addr().data(), static_cast<int>(this->_internal_ip_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_transport.ip_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_addr(), target);
  }

  // uint32 netmask = 4;
  if (this->netmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_netmask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_transport)
  return target;
}

size_t pb_transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_transport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_addr = 3;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_addr());
  }

  // uint64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flag());
  }

  // uint64 max_bw = 2;
  if (this->max_bw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_bw());
  }

  // uint32 netmask = 4;
  if (this->netmask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_netmask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_transport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_transport)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_transport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pb_transport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_transport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_transport)
    MergeFrom(*source);
  }
}

void pb_transport::MergeFrom(const pb_transport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_transport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {
    _internal_set_ip_addr(from._internal_ip_addr());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.max_bw() != 0) {
    _internal_set_max_bw(from._internal_max_bw());
  }
  if (from.netmask() != 0) {
    _internal_set_netmask(from._internal_netmask());
  }
}

void pb_transport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_transport::CopyFrom(const pb_transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_transport::IsInitialized() const {
  return true;
}

void pb_transport::InternalSwap(pb_transport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_addr_.Swap(&other->ip_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pb_transport, netmask_)
      + sizeof(pb_transport::netmask_)
      - PROTOBUF_FIELD_OFFSET(pb_transport, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pb_transport::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_hello* Arena::CreateMaybeMessage< ::pb_hello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_hello >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_screen* Arena::CreateMaybeMessage< ::pb_screen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_screen >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_accept* Arena::CreateMaybeMessage< ::pb_accept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_accept >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_transport* Arena::CreateMaybeMessage< ::pb_transport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_transport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
