// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2eproto;
class pb_accept;
class pb_acceptDefaultTypeInternal;
extern pb_acceptDefaultTypeInternal _pb_accept_default_instance_;
class pb_hello;
class pb_helloDefaultTypeInternal;
extern pb_helloDefaultTypeInternal _pb_hello_default_instance_;
class pb_hello_reply;
class pb_hello_replyDefaultTypeInternal;
extern pb_hello_replyDefaultTypeInternal _pb_hello_reply_default_instance_;
class pb_ibv_mr;
class pb_ibv_mrDefaultTypeInternal;
extern pb_ibv_mrDefaultTypeInternal _pb_ibv_mr_default_instance_;
class pb_mr;
class pb_mrDefaultTypeInternal;
extern pb_mrDefaultTypeInternal _pb_mr_default_instance_;
class pb_mr_wrapper;
class pb_mr_wrapperDefaultTypeInternal;
extern pb_mr_wrapperDefaultTypeInternal _pb_mr_wrapper_default_instance_;
class pb_screen;
class pb_screenDefaultTypeInternal;
extern pb_screenDefaultTypeInternal _pb_screen_default_instance_;
class pb_transport;
class pb_transportDefaultTypeInternal;
extern pb_transportDefaultTypeInternal _pb_transport_default_instance_;
class pb_wrapper;
class pb_wrapperDefaultTypeInternal;
extern pb_wrapperDefaultTypeInternal _pb_wrapper_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_accept* Arena::CreateMaybeMessage<::pb_accept>(Arena*);
template<> ::pb_hello* Arena::CreateMaybeMessage<::pb_hello>(Arena*);
template<> ::pb_hello_reply* Arena::CreateMaybeMessage<::pb_hello_reply>(Arena*);
template<> ::pb_ibv_mr* Arena::CreateMaybeMessage<::pb_ibv_mr>(Arena*);
template<> ::pb_mr* Arena::CreateMaybeMessage<::pb_mr>(Arena*);
template<> ::pb_mr_wrapper* Arena::CreateMaybeMessage<::pb_mr_wrapper>(Arena*);
template<> ::pb_screen* Arena::CreateMaybeMessage<::pb_screen>(Arena*);
template<> ::pb_transport* Arena::CreateMaybeMessage<::pb_transport>(Arena*);
template<> ::pb_wrapper* Arena::CreateMaybeMessage<::pb_wrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum pb_pixmap : int {
  z_bgr_888 = 0,
  z_bgra_888 = 1,
  z_rgb_888 = 2,
  z_rgba_8888 = 3,
  pb_pixmap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  pb_pixmap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool pb_pixmap_IsValid(int value);
constexpr pb_pixmap pb_pixmap_MIN = z_bgr_888;
constexpr pb_pixmap pb_pixmap_MAX = z_rgba_8888;
constexpr int pb_pixmap_ARRAYSIZE = pb_pixmap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pb_pixmap_descriptor();
template<typename T>
inline const std::string& pb_pixmap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, pb_pixmap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function pb_pixmap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    pb_pixmap_descriptor(), enum_t_value);
}
inline bool pb_pixmap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, pb_pixmap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<pb_pixmap>(
    pb_pixmap_descriptor(), name, value);
}
// ===================================================================

class pb_wrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_wrapper) */ {
 public:
  inline pb_wrapper() : pb_wrapper(nullptr) {}
  virtual ~pb_wrapper();

  pb_wrapper(const pb_wrapper& from);
  pb_wrapper(pb_wrapper&& from) noexcept
    : pb_wrapper() {
    *this = ::std::move(from);
  }

  inline pb_wrapper& operator=(const pb_wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_wrapper& operator=(pb_wrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_wrapper& default_instance();

  enum WrappedMsgCase {
    kPbWhello = 1,
    kPbWhelloReply = 2,
    kPbWmrWrapper = 3,
    WRAPPED_MSG_NOT_SET = 0,
  };

  static inline const pb_wrapper* internal_default_instance() {
    return reinterpret_cast<const pb_wrapper*>(
               &_pb_wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pb_wrapper& a, pb_wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_wrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_wrapper* New() const final {
    return CreateMaybeMessage<pb_wrapper>(nullptr);
  }

  pb_wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_wrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_wrapper& from);
  void MergeFrom(const pb_wrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_wrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_wrapper";
  }
  protected:
  explicit pb_wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbWhelloFieldNumber = 1,
    kPbWhelloReplyFieldNumber = 2,
    kPbWmrWrapperFieldNumber = 3,
  };
  // .pb_hello pb_whello = 1;
  bool has_pb_whello() const;
  private:
  bool _internal_has_pb_whello() const;
  public:
  void clear_pb_whello();
  const ::pb_hello& pb_whello() const;
  ::pb_hello* release_pb_whello();
  ::pb_hello* mutable_pb_whello();
  void set_allocated_pb_whello(::pb_hello* pb_whello);
  private:
  const ::pb_hello& _internal_pb_whello() const;
  ::pb_hello* _internal_mutable_pb_whello();
  public:
  void unsafe_arena_set_allocated_pb_whello(
      ::pb_hello* pb_whello);
  ::pb_hello* unsafe_arena_release_pb_whello();

  // .pb_hello_reply pb_whello_reply = 2;
  bool has_pb_whello_reply() const;
  private:
  bool _internal_has_pb_whello_reply() const;
  public:
  void clear_pb_whello_reply();
  const ::pb_hello_reply& pb_whello_reply() const;
  ::pb_hello_reply* release_pb_whello_reply();
  ::pb_hello_reply* mutable_pb_whello_reply();
  void set_allocated_pb_whello_reply(::pb_hello_reply* pb_whello_reply);
  private:
  const ::pb_hello_reply& _internal_pb_whello_reply() const;
  ::pb_hello_reply* _internal_mutable_pb_whello_reply();
  public:
  void unsafe_arena_set_allocated_pb_whello_reply(
      ::pb_hello_reply* pb_whello_reply);
  ::pb_hello_reply* unsafe_arena_release_pb_whello_reply();

  // .pb_mr_wrapper pb_wmr_wrapper = 3;
  bool has_pb_wmr_wrapper() const;
  private:
  bool _internal_has_pb_wmr_wrapper() const;
  public:
  void clear_pb_wmr_wrapper();
  const ::pb_mr_wrapper& pb_wmr_wrapper() const;
  ::pb_mr_wrapper* release_pb_wmr_wrapper();
  ::pb_mr_wrapper* mutable_pb_wmr_wrapper();
  void set_allocated_pb_wmr_wrapper(::pb_mr_wrapper* pb_wmr_wrapper);
  private:
  const ::pb_mr_wrapper& _internal_pb_wmr_wrapper() const;
  ::pb_mr_wrapper* _internal_mutable_pb_wmr_wrapper();
  public:
  void unsafe_arena_set_allocated_pb_wmr_wrapper(
      ::pb_mr_wrapper* pb_wmr_wrapper);
  ::pb_mr_wrapper* unsafe_arena_release_pb_wmr_wrapper();

  void clear_wrapped_msg();
  WrappedMsgCase wrapped_msg_case() const;
  // @@protoc_insertion_point(class_scope:pb_wrapper)
 private:
  class _Internal;
  void set_has_pb_whello();
  void set_has_pb_whello_reply();
  void set_has_pb_wmr_wrapper();

  inline bool has_wrapped_msg() const;
  inline void clear_has_wrapped_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WrappedMsgUnion {
    WrappedMsgUnion() {}
    ::pb_hello* pb_whello_;
    ::pb_hello_reply* pb_whello_reply_;
    ::pb_mr_wrapper* pb_wmr_wrapper_;
  } wrapped_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_hello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_hello) */ {
 public:
  inline pb_hello() : pb_hello(nullptr) {}
  virtual ~pb_hello();

  pb_hello(const pb_hello& from);
  pb_hello(pb_hello&& from) noexcept
    : pb_hello() {
    *this = ::std::move(from);
  }

  inline pb_hello& operator=(const pb_hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_hello& operator=(pb_hello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_hello& default_instance();

  static inline const pb_hello* internal_default_instance() {
    return reinterpret_cast<const pb_hello*>(
               &_pb_hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pb_hello& a, pb_hello& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_hello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_hello* New() const final {
    return CreateMaybeMessage<pb_hello>(nullptr);
  }

  pb_hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_hello& from);
  void MergeFrom(const pb_hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_hello";
  }
  protected:
  explicit pb_hello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportsFieldNumber = 1,
    kScreensFieldNumber = 2,
    kAcceptFieldNumber = 3,
  };
  // repeated .pb_transport transports = 1;
  int transports_size() const;
  private:
  int _internal_transports_size() const;
  public:
  void clear_transports();
  ::pb_transport* mutable_transports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >*
      mutable_transports();
  private:
  const ::pb_transport& _internal_transports(int index) const;
  ::pb_transport* _internal_add_transports();
  public:
  const ::pb_transport& transports(int index) const;
  ::pb_transport* add_transports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >&
      transports() const;

  // repeated .pb_screen screens = 2;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::pb_screen* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
      mutable_screens();
  private:
  const ::pb_screen& _internal_screens(int index) const;
  ::pb_screen* _internal_add_screens();
  public:
  const ::pb_screen& screens(int index) const;
  ::pb_screen* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
      screens() const;

  // repeated .pb_accept accept = 3;
  int accept_size() const;
  private:
  int _internal_accept_size() const;
  public:
  void clear_accept();
  ::pb_accept* mutable_accept(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >*
      mutable_accept();
  private:
  const ::pb_accept& _internal_accept(int index) const;
  ::pb_accept* _internal_add_accept();
  public:
  const ::pb_accept& accept(int index) const;
  ::pb_accept* add_accept();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >&
      accept() const;

  // @@protoc_insertion_point(class_scope:pb_hello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport > transports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen > screens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept > accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_hello_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_hello_reply) */ {
 public:
  inline pb_hello_reply() : pb_hello_reply(nullptr) {}
  virtual ~pb_hello_reply();

  pb_hello_reply(const pb_hello_reply& from);
  pb_hello_reply(pb_hello_reply&& from) noexcept
    : pb_hello_reply() {
    *this = ::std::move(from);
  }

  inline pb_hello_reply& operator=(const pb_hello_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_hello_reply& operator=(pb_hello_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_hello_reply& default_instance();

  static inline const pb_hello_reply* internal_default_instance() {
    return reinterpret_cast<const pb_hello_reply*>(
               &_pb_hello_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pb_hello_reply& a, pb_hello_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_hello_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_hello_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_hello_reply* New() const final {
    return CreateMaybeMessage<pb_hello_reply>(nullptr);
  }

  pb_hello_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_hello_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_hello_reply& from);
  void MergeFrom(const pb_hello_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_hello_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_hello_reply";
  }
  protected:
  explicit pb_hello_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreensFieldNumber = 3,
    kTransportFieldNumber = 2,
    kCookieFieldNumber = 1,
  };
  // repeated .pb_screen screens = 3;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::pb_screen* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
      mutable_screens();
  private:
  const ::pb_screen& _internal_screens(int index) const;
  ::pb_screen* _internal_add_screens();
  public:
  const ::pb_screen& screens(int index) const;
  ::pb_screen* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
      screens() const;

  // .pb_transport transport = 2;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::pb_transport& transport() const;
  ::pb_transport* release_transport();
  ::pb_transport* mutable_transport();
  void set_allocated_transport(::pb_transport* transport);
  private:
  const ::pb_transport& _internal_transport() const;
  ::pb_transport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::pb_transport* transport);
  ::pb_transport* unsafe_arena_release_transport();

  // uint64 cookie = 1;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::uint64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cookie() const;
  void _internal_set_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_hello_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen > screens_;
  ::pb_transport* transport_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_screen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_screen) */ {
 public:
  inline pb_screen() : pb_screen(nullptr) {}
  virtual ~pb_screen();

  pb_screen(const pb_screen& from);
  pb_screen(pb_screen&& from) noexcept
    : pb_screen() {
    *this = ::std::move(from);
  }

  inline pb_screen& operator=(const pb_screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_screen& operator=(pb_screen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_screen& default_instance();

  static inline const pb_screen* internal_default_instance() {
    return reinterpret_cast<const pb_screen*>(
               &_pb_screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(pb_screen& a, pb_screen& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_screen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_screen* New() const final {
    return CreateMaybeMessage<pb_screen>(nullptr);
  }

  pb_screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_screen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_screen& from);
  void MergeFrom(const pb_screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_screen";
  }
  protected:
  explicit pb_screen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kResXFieldNumber = 2,
    kResYFieldNumber = 3,
    kPixmapFieldNumber = 4,
    kHzFieldNumber = 5,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_x = 2;
  void clear_res_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x() const;
  void set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_x() const;
  void _internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_y = 3;
  void clear_res_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y() const;
  void set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_y() const;
  void _internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb_pixmap pixmap = 4;
  void clear_pixmap();
  ::pb_pixmap pixmap() const;
  void set_pixmap(::pb_pixmap value);
  private:
  ::pb_pixmap _internal_pixmap() const;
  void _internal_set_pixmap(::pb_pixmap value);
  public:

  // uint32 hz = 5;
  void clear_hz();
  ::PROTOBUF_NAMESPACE_ID::uint32 hz() const;
  void set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hz() const;
  void _internal_set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y_;
  int pixmap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_accept PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_accept) */ {
 public:
  inline pb_accept() : pb_accept(nullptr) {}
  virtual ~pb_accept();

  pb_accept(const pb_accept& from);
  pb_accept(pb_accept&& from) noexcept
    : pb_accept() {
    *this = ::std::move(from);
  }

  inline pb_accept& operator=(const pb_accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_accept& operator=(pb_accept&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_accept& default_instance();

  static inline const pb_accept* internal_default_instance() {
    return reinterpret_cast<const pb_accept*>(
               &_pb_accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(pb_accept& a, pb_accept& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_accept* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_accept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_accept* New() const final {
    return CreateMaybeMessage<pb_accept>(nullptr);
  }

  pb_accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_accept& from);
  void MergeFrom(const pb_accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_accept";
  }
  protected:
  explicit pb_accept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kResXFieldNumber = 2,
    kResYFieldNumber = 3,
    kPixmapFieldNumber = 4,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_x = 2;
  void clear_res_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x() const;
  void set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_x() const;
  void _internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_y = 3;
  void clear_res_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y() const;
  void set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_y() const;
  void _internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb_pixmap pixmap = 4;
  void clear_pixmap();
  ::pb_pixmap pixmap() const;
  void set_pixmap(::pb_pixmap value);
  private:
  ::pb_pixmap _internal_pixmap() const;
  void _internal_set_pixmap(::pb_pixmap value);
  public:

  // @@protoc_insertion_point(class_scope:pb_accept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y_;
  int pixmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_transport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_transport) */ {
 public:
  inline pb_transport() : pb_transport(nullptr) {}
  virtual ~pb_transport();

  pb_transport(const pb_transport& from);
  pb_transport(pb_transport&& from) noexcept
    : pb_transport() {
    *this = ::std::move(from);
  }

  inline pb_transport& operator=(const pb_transport& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_transport& operator=(pb_transport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_transport& default_instance();

  static inline const pb_transport* internal_default_instance() {
    return reinterpret_cast<const pb_transport*>(
               &_pb_transport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(pb_transport& a, pb_transport& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_transport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_transport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_transport* New() const final {
    return CreateMaybeMessage<pb_transport>(nullptr);
  }

  pb_transport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_transport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_transport& from);
  void MergeFrom(const pb_transport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_transport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_transport";
  }
  protected:
  explicit pb_transport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrFieldNumber = 3,
    kPortFieldNumber = 4,
    kFlagFieldNumber = 1,
    kMaxBwFieldNumber = 2,
    kNetmaskFieldNumber = 5,
  };
  // string ip_addr = 3;
  void clear_ip_addr();
  const std::string& ip_addr() const;
  void set_ip_addr(const std::string& value);
  void set_ip_addr(std::string&& value);
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  std::string* mutable_ip_addr();
  std::string* release_ip_addr();
  void set_allocated_ip_addr(std::string* ip_addr);
  private:
  const std::string& _internal_ip_addr() const;
  void _internal_set_ip_addr(const std::string& value);
  std::string* _internal_mutable_ip_addr();
  public:

  // string port = 4;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // uint64 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_bw = 2;
  void clear_max_bw();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bw() const;
  void set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_bw() const;
  void _internal_set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 netmask = 5;
  void clear_netmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 netmask() const;
  void set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_netmask() const;
  void _internal_set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_transport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 netmask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_ibv_mr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_ibv_mr) */ {
 public:
  inline pb_ibv_mr() : pb_ibv_mr(nullptr) {}
  virtual ~pb_ibv_mr();

  pb_ibv_mr(const pb_ibv_mr& from);
  pb_ibv_mr(pb_ibv_mr&& from) noexcept
    : pb_ibv_mr() {
    *this = ::std::move(from);
  }

  inline pb_ibv_mr& operator=(const pb_ibv_mr& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_ibv_mr& operator=(pb_ibv_mr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_ibv_mr& default_instance();

  static inline const pb_ibv_mr* internal_default_instance() {
    return reinterpret_cast<const pb_ibv_mr*>(
               &_pb_ibv_mr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(pb_ibv_mr& a, pb_ibv_mr& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_ibv_mr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_ibv_mr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_ibv_mr* New() const final {
    return CreateMaybeMessage<pb_ibv_mr>(nullptr);
  }

  pb_ibv_mr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_ibv_mr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_ibv_mr& from);
  void MergeFrom(const pb_ibv_mr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_ibv_mr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_ibv_mr";
  }
  protected:
  explicit pb_ibv_mr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kLengthFieldNumber = 2,
    kAccessFlagsFieldNumber = 4,
    kRkeyFieldNumber = 3,
  };
  // uint64 addr = 1;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_addr() const;
  void _internal_set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 access_flags = 4;
  void clear_access_flags();
  ::PROTOBUF_NAMESPACE_ID::uint64 access_flags() const;
  void set_access_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_access_flags() const;
  void _internal_set_access_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 rkey = 3;
  void clear_rkey();
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey() const;
  void set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rkey() const;
  void _internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_ibv_mr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 access_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_mr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_mr) */ {
 public:
  inline pb_mr() : pb_mr(nullptr) {}
  virtual ~pb_mr();

  pb_mr(const pb_mr& from);
  pb_mr(pb_mr&& from) noexcept
    : pb_mr() {
    *this = ::std::move(from);
  }

  inline pb_mr& operator=(const pb_mr& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_mr& operator=(pb_mr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_mr& default_instance();

  enum MrDataCase {
    kIbvMr = 2,
    MR_DATA_NOT_SET = 0,
  };

  static inline const pb_mr* internal_default_instance() {
    return reinterpret_cast<const pb_mr*>(
               &_pb_mr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(pb_mr& a, pb_mr& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_mr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_mr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_mr* New() const final {
    return CreateMaybeMessage<pb_mr>(nullptr);
  }

  pb_mr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_mr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_mr& from);
  void MergeFrom(const pb_mr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_mr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_mr";
  }
  protected:
  explicit pb_mr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kIbvMrFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb_ibv_mr ibv_mr = 2;
  bool has_ibv_mr() const;
  private:
  bool _internal_has_ibv_mr() const;
  public:
  void clear_ibv_mr();
  const ::pb_ibv_mr& ibv_mr() const;
  ::pb_ibv_mr* release_ibv_mr();
  ::pb_ibv_mr* mutable_ibv_mr();
  void set_allocated_ibv_mr(::pb_ibv_mr* ibv_mr);
  private:
  const ::pb_ibv_mr& _internal_ibv_mr() const;
  ::pb_ibv_mr* _internal_mutable_ibv_mr();
  public:
  void unsafe_arena_set_allocated_ibv_mr(
      ::pb_ibv_mr* ibv_mr);
  ::pb_ibv_mr* unsafe_arena_release_ibv_mr();

  void clear_mr_data();
  MrDataCase mr_data_case() const;
  // @@protoc_insertion_point(class_scope:pb_mr)
 private:
  class _Internal;
  void set_has_ibv_mr();

  inline bool has_mr_data() const;
  inline void clear_has_mr_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  union MrDataUnion {
    MrDataUnion() {}
    ::pb_ibv_mr* ibv_mr_;
  } mr_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_mr_wrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_mr_wrapper) */ {
 public:
  inline pb_mr_wrapper() : pb_mr_wrapper(nullptr) {}
  virtual ~pb_mr_wrapper();

  pb_mr_wrapper(const pb_mr_wrapper& from);
  pb_mr_wrapper(pb_mr_wrapper&& from) noexcept
    : pb_mr_wrapper() {
    *this = ::std::move(from);
  }

  inline pb_mr_wrapper& operator=(const pb_mr_wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_mr_wrapper& operator=(pb_mr_wrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_mr_wrapper& default_instance();

  static inline const pb_mr_wrapper* internal_default_instance() {
    return reinterpret_cast<const pb_mr_wrapper*>(
               &_pb_mr_wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(pb_mr_wrapper& a, pb_mr_wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_mr_wrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_mr_wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_mr_wrapper* New() const final {
    return CreateMaybeMessage<pb_mr_wrapper>(nullptr);
  }

  pb_mr_wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_mr_wrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_mr_wrapper& from);
  void MergeFrom(const pb_mr_wrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_mr_wrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_mr_wrapper";
  }
  protected:
  explicit pb_mr_wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMrFieldNumber = 1,
  };
  // repeated .pb_mr mr = 1;
  int mr_size() const;
  private:
  int _internal_mr_size() const;
  public:
  void clear_mr();
  ::pb_mr* mutable_mr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_mr >*
      mutable_mr();
  private:
  const ::pb_mr& _internal_mr(int index) const;
  ::pb_mr* _internal_add_mr();
  public:
  const ::pb_mr& mr(int index) const;
  ::pb_mr* add_mr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_mr >&
      mr() const;

  // @@protoc_insertion_point(class_scope:pb_mr_wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_mr > mr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pb_wrapper

// .pb_hello pb_whello = 1;
inline bool pb_wrapper::_internal_has_pb_whello() const {
  return wrapped_msg_case() == kPbWhello;
}
inline bool pb_wrapper::has_pb_whello() const {
  return _internal_has_pb_whello();
}
inline void pb_wrapper::set_has_pb_whello() {
  _oneof_case_[0] = kPbWhello;
}
inline void pb_wrapper::clear_pb_whello() {
  if (_internal_has_pb_whello()) {
    if (GetArena() == nullptr) {
      delete wrapped_msg_.pb_whello_;
    }
    clear_has_wrapped_msg();
  }
}
inline ::pb_hello* pb_wrapper::release_pb_whello() {
  // @@protoc_insertion_point(field_release:pb_wrapper.pb_whello)
  if (_internal_has_pb_whello()) {
    clear_has_wrapped_msg();
      ::pb_hello* temp = wrapped_msg_.pb_whello_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    wrapped_msg_.pb_whello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_hello& pb_wrapper::_internal_pb_whello() const {
  return _internal_has_pb_whello()
      ? *wrapped_msg_.pb_whello_
      : reinterpret_cast< ::pb_hello&>(::_pb_hello_default_instance_);
}
inline const ::pb_hello& pb_wrapper::pb_whello() const {
  // @@protoc_insertion_point(field_get:pb_wrapper.pb_whello)
  return _internal_pb_whello();
}
inline ::pb_hello* pb_wrapper::unsafe_arena_release_pb_whello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_wrapper.pb_whello)
  if (_internal_has_pb_whello()) {
    clear_has_wrapped_msg();
    ::pb_hello* temp = wrapped_msg_.pb_whello_;
    wrapped_msg_.pb_whello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void pb_wrapper::unsafe_arena_set_allocated_pb_whello(::pb_hello* pb_whello) {
  clear_wrapped_msg();
  if (pb_whello) {
    set_has_pb_whello();
    wrapped_msg_.pb_whello_ = pb_whello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_wrapper.pb_whello)
}
inline ::pb_hello* pb_wrapper::_internal_mutable_pb_whello() {
  if (!_internal_has_pb_whello()) {
    clear_wrapped_msg();
    set_has_pb_whello();
    wrapped_msg_.pb_whello_ = CreateMaybeMessage< ::pb_hello >(GetArena());
  }
  return wrapped_msg_.pb_whello_;
}
inline ::pb_hello* pb_wrapper::mutable_pb_whello() {
  // @@protoc_insertion_point(field_mutable:pb_wrapper.pb_whello)
  return _internal_mutable_pb_whello();
}

// .pb_hello_reply pb_whello_reply = 2;
inline bool pb_wrapper::_internal_has_pb_whello_reply() const {
  return wrapped_msg_case() == kPbWhelloReply;
}
inline bool pb_wrapper::has_pb_whello_reply() const {
  return _internal_has_pb_whello_reply();
}
inline void pb_wrapper::set_has_pb_whello_reply() {
  _oneof_case_[0] = kPbWhelloReply;
}
inline void pb_wrapper::clear_pb_whello_reply() {
  if (_internal_has_pb_whello_reply()) {
    if (GetArena() == nullptr) {
      delete wrapped_msg_.pb_whello_reply_;
    }
    clear_has_wrapped_msg();
  }
}
inline ::pb_hello_reply* pb_wrapper::release_pb_whello_reply() {
  // @@protoc_insertion_point(field_release:pb_wrapper.pb_whello_reply)
  if (_internal_has_pb_whello_reply()) {
    clear_has_wrapped_msg();
      ::pb_hello_reply* temp = wrapped_msg_.pb_whello_reply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    wrapped_msg_.pb_whello_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_hello_reply& pb_wrapper::_internal_pb_whello_reply() const {
  return _internal_has_pb_whello_reply()
      ? *wrapped_msg_.pb_whello_reply_
      : reinterpret_cast< ::pb_hello_reply&>(::_pb_hello_reply_default_instance_);
}
inline const ::pb_hello_reply& pb_wrapper::pb_whello_reply() const {
  // @@protoc_insertion_point(field_get:pb_wrapper.pb_whello_reply)
  return _internal_pb_whello_reply();
}
inline ::pb_hello_reply* pb_wrapper::unsafe_arena_release_pb_whello_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_wrapper.pb_whello_reply)
  if (_internal_has_pb_whello_reply()) {
    clear_has_wrapped_msg();
    ::pb_hello_reply* temp = wrapped_msg_.pb_whello_reply_;
    wrapped_msg_.pb_whello_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void pb_wrapper::unsafe_arena_set_allocated_pb_whello_reply(::pb_hello_reply* pb_whello_reply) {
  clear_wrapped_msg();
  if (pb_whello_reply) {
    set_has_pb_whello_reply();
    wrapped_msg_.pb_whello_reply_ = pb_whello_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_wrapper.pb_whello_reply)
}
inline ::pb_hello_reply* pb_wrapper::_internal_mutable_pb_whello_reply() {
  if (!_internal_has_pb_whello_reply()) {
    clear_wrapped_msg();
    set_has_pb_whello_reply();
    wrapped_msg_.pb_whello_reply_ = CreateMaybeMessage< ::pb_hello_reply >(GetArena());
  }
  return wrapped_msg_.pb_whello_reply_;
}
inline ::pb_hello_reply* pb_wrapper::mutable_pb_whello_reply() {
  // @@protoc_insertion_point(field_mutable:pb_wrapper.pb_whello_reply)
  return _internal_mutable_pb_whello_reply();
}

// .pb_mr_wrapper pb_wmr_wrapper = 3;
inline bool pb_wrapper::_internal_has_pb_wmr_wrapper() const {
  return wrapped_msg_case() == kPbWmrWrapper;
}
inline bool pb_wrapper::has_pb_wmr_wrapper() const {
  return _internal_has_pb_wmr_wrapper();
}
inline void pb_wrapper::set_has_pb_wmr_wrapper() {
  _oneof_case_[0] = kPbWmrWrapper;
}
inline void pb_wrapper::clear_pb_wmr_wrapper() {
  if (_internal_has_pb_wmr_wrapper()) {
    if (GetArena() == nullptr) {
      delete wrapped_msg_.pb_wmr_wrapper_;
    }
    clear_has_wrapped_msg();
  }
}
inline ::pb_mr_wrapper* pb_wrapper::release_pb_wmr_wrapper() {
  // @@protoc_insertion_point(field_release:pb_wrapper.pb_wmr_wrapper)
  if (_internal_has_pb_wmr_wrapper()) {
    clear_has_wrapped_msg();
      ::pb_mr_wrapper* temp = wrapped_msg_.pb_wmr_wrapper_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    wrapped_msg_.pb_wmr_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_mr_wrapper& pb_wrapper::_internal_pb_wmr_wrapper() const {
  return _internal_has_pb_wmr_wrapper()
      ? *wrapped_msg_.pb_wmr_wrapper_
      : reinterpret_cast< ::pb_mr_wrapper&>(::_pb_mr_wrapper_default_instance_);
}
inline const ::pb_mr_wrapper& pb_wrapper::pb_wmr_wrapper() const {
  // @@protoc_insertion_point(field_get:pb_wrapper.pb_wmr_wrapper)
  return _internal_pb_wmr_wrapper();
}
inline ::pb_mr_wrapper* pb_wrapper::unsafe_arena_release_pb_wmr_wrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_wrapper.pb_wmr_wrapper)
  if (_internal_has_pb_wmr_wrapper()) {
    clear_has_wrapped_msg();
    ::pb_mr_wrapper* temp = wrapped_msg_.pb_wmr_wrapper_;
    wrapped_msg_.pb_wmr_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void pb_wrapper::unsafe_arena_set_allocated_pb_wmr_wrapper(::pb_mr_wrapper* pb_wmr_wrapper) {
  clear_wrapped_msg();
  if (pb_wmr_wrapper) {
    set_has_pb_wmr_wrapper();
    wrapped_msg_.pb_wmr_wrapper_ = pb_wmr_wrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_wrapper.pb_wmr_wrapper)
}
inline ::pb_mr_wrapper* pb_wrapper::_internal_mutable_pb_wmr_wrapper() {
  if (!_internal_has_pb_wmr_wrapper()) {
    clear_wrapped_msg();
    set_has_pb_wmr_wrapper();
    wrapped_msg_.pb_wmr_wrapper_ = CreateMaybeMessage< ::pb_mr_wrapper >(GetArena());
  }
  return wrapped_msg_.pb_wmr_wrapper_;
}
inline ::pb_mr_wrapper* pb_wrapper::mutable_pb_wmr_wrapper() {
  // @@protoc_insertion_point(field_mutable:pb_wrapper.pb_wmr_wrapper)
  return _internal_mutable_pb_wmr_wrapper();
}

inline bool pb_wrapper::has_wrapped_msg() const {
  return wrapped_msg_case() != WRAPPED_MSG_NOT_SET;
}
inline void pb_wrapper::clear_has_wrapped_msg() {
  _oneof_case_[0] = WRAPPED_MSG_NOT_SET;
}
inline pb_wrapper::WrappedMsgCase pb_wrapper::wrapped_msg_case() const {
  return pb_wrapper::WrappedMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// pb_hello

// repeated .pb_transport transports = 1;
inline int pb_hello::_internal_transports_size() const {
  return transports_.size();
}
inline int pb_hello::transports_size() const {
  return _internal_transports_size();
}
inline void pb_hello::clear_transports() {
  transports_.Clear();
}
inline ::pb_transport* pb_hello::mutable_transports(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.transports)
  return transports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >*
pb_hello::mutable_transports() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.transports)
  return &transports_;
}
inline const ::pb_transport& pb_hello::_internal_transports(int index) const {
  return transports_.Get(index);
}
inline const ::pb_transport& pb_hello::transports(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.transports)
  return _internal_transports(index);
}
inline ::pb_transport* pb_hello::_internal_add_transports() {
  return transports_.Add();
}
inline ::pb_transport* pb_hello::add_transports() {
  // @@protoc_insertion_point(field_add:pb_hello.transports)
  return _internal_add_transports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >&
pb_hello::transports() const {
  // @@protoc_insertion_point(field_list:pb_hello.transports)
  return transports_;
}

// repeated .pb_screen screens = 2;
inline int pb_hello::_internal_screens_size() const {
  return screens_.size();
}
inline int pb_hello::screens_size() const {
  return _internal_screens_size();
}
inline void pb_hello::clear_screens() {
  screens_.Clear();
}
inline ::pb_screen* pb_hello::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.screens)
  return screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
pb_hello::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.screens)
  return &screens_;
}
inline const ::pb_screen& pb_hello::_internal_screens(int index) const {
  return screens_.Get(index);
}
inline const ::pb_screen& pb_hello::screens(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.screens)
  return _internal_screens(index);
}
inline ::pb_screen* pb_hello::_internal_add_screens() {
  return screens_.Add();
}
inline ::pb_screen* pb_hello::add_screens() {
  // @@protoc_insertion_point(field_add:pb_hello.screens)
  return _internal_add_screens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
pb_hello::screens() const {
  // @@protoc_insertion_point(field_list:pb_hello.screens)
  return screens_;
}

// repeated .pb_accept accept = 3;
inline int pb_hello::_internal_accept_size() const {
  return accept_.size();
}
inline int pb_hello::accept_size() const {
  return _internal_accept_size();
}
inline void pb_hello::clear_accept() {
  accept_.Clear();
}
inline ::pb_accept* pb_hello::mutable_accept(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.accept)
  return accept_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >*
pb_hello::mutable_accept() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.accept)
  return &accept_;
}
inline const ::pb_accept& pb_hello::_internal_accept(int index) const {
  return accept_.Get(index);
}
inline const ::pb_accept& pb_hello::accept(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.accept)
  return _internal_accept(index);
}
inline ::pb_accept* pb_hello::_internal_add_accept() {
  return accept_.Add();
}
inline ::pb_accept* pb_hello::add_accept() {
  // @@protoc_insertion_point(field_add:pb_hello.accept)
  return _internal_add_accept();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >&
pb_hello::accept() const {
  // @@protoc_insertion_point(field_list:pb_hello.accept)
  return accept_;
}

// -------------------------------------------------------------------

// pb_hello_reply

// uint64 cookie = 1;
inline void pb_hello_reply::clear_cookie() {
  cookie_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_hello_reply::_internal_cookie() const {
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_hello_reply::cookie() const {
  // @@protoc_insertion_point(field_get:pb_hello_reply.cookie)
  return _internal_cookie();
}
inline void pb_hello_reply::_internal_set_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cookie_ = value;
}
inline void pb_hello_reply::set_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:pb_hello_reply.cookie)
}

// .pb_transport transport = 2;
inline bool pb_hello_reply::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool pb_hello_reply::has_transport() const {
  return _internal_has_transport();
}
inline void pb_hello_reply::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::pb_transport& pb_hello_reply::_internal_transport() const {
  const ::pb_transport* p = transport_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_transport&>(
      ::_pb_transport_default_instance_);
}
inline const ::pb_transport& pb_hello_reply::transport() const {
  // @@protoc_insertion_point(field_get:pb_hello_reply.transport)
  return _internal_transport();
}
inline void pb_hello_reply::unsafe_arena_set_allocated_transport(
    ::pb_transport* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_hello_reply.transport)
}
inline ::pb_transport* pb_hello_reply::release_transport() {
  
  ::pb_transport* temp = transport_;
  transport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_transport* pb_hello_reply::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:pb_hello_reply.transport)
  
  ::pb_transport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::pb_transport* pb_hello_reply::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_transport>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::pb_transport* pb_hello_reply::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:pb_hello_reply.transport)
  return _internal_mutable_transport();
}
inline void pb_hello_reply::set_allocated_transport(::pb_transport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transport);
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:pb_hello_reply.transport)
}

// repeated .pb_screen screens = 3;
inline int pb_hello_reply::_internal_screens_size() const {
  return screens_.size();
}
inline int pb_hello_reply::screens_size() const {
  return _internal_screens_size();
}
inline void pb_hello_reply::clear_screens() {
  screens_.Clear();
}
inline ::pb_screen* pb_hello_reply::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello_reply.screens)
  return screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
pb_hello_reply::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello_reply.screens)
  return &screens_;
}
inline const ::pb_screen& pb_hello_reply::_internal_screens(int index) const {
  return screens_.Get(index);
}
inline const ::pb_screen& pb_hello_reply::screens(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello_reply.screens)
  return _internal_screens(index);
}
inline ::pb_screen* pb_hello_reply::_internal_add_screens() {
  return screens_.Add();
}
inline ::pb_screen* pb_hello_reply::add_screens() {
  // @@protoc_insertion_point(field_add:pb_hello_reply.screens)
  return _internal_add_screens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
pb_hello_reply::screens() const {
  // @@protoc_insertion_point(field_list:pb_hello_reply.screens)
  return screens_;
}

// -------------------------------------------------------------------

// pb_screen

// uint32 index = 1;
inline void pb_screen::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::index() const {
  // @@protoc_insertion_point(field_get:pb_screen.index)
  return _internal_index();
}
inline void pb_screen::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void pb_screen::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb_screen.index)
}

// uint32 res_x = 2;
inline void pb_screen::clear_res_x() {
  res_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_res_x() const {
  return res_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::res_x() const {
  // @@protoc_insertion_point(field_get:pb_screen.res_x)
  return _internal_res_x();
}
inline void pb_screen::_internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_x_ = value;
}
inline void pb_screen::set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_x(value);
  // @@protoc_insertion_point(field_set:pb_screen.res_x)
}

// uint32 res_y = 3;
inline void pb_screen::clear_res_y() {
  res_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_res_y() const {
  return res_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::res_y() const {
  // @@protoc_insertion_point(field_get:pb_screen.res_y)
  return _internal_res_y();
}
inline void pb_screen::_internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_y_ = value;
}
inline void pb_screen::set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_y(value);
  // @@protoc_insertion_point(field_set:pb_screen.res_y)
}

// .pb_pixmap pixmap = 4;
inline void pb_screen::clear_pixmap() {
  pixmap_ = 0;
}
inline ::pb_pixmap pb_screen::_internal_pixmap() const {
  return static_cast< ::pb_pixmap >(pixmap_);
}
inline ::pb_pixmap pb_screen::pixmap() const {
  // @@protoc_insertion_point(field_get:pb_screen.pixmap)
  return _internal_pixmap();
}
inline void pb_screen::_internal_set_pixmap(::pb_pixmap value) {
  
  pixmap_ = value;
}
inline void pb_screen::set_pixmap(::pb_pixmap value) {
  _internal_set_pixmap(value);
  // @@protoc_insertion_point(field_set:pb_screen.pixmap)
}

// uint32 hz = 5;
inline void pb_screen::clear_hz() {
  hz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_hz() const {
  return hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::hz() const {
  // @@protoc_insertion_point(field_get:pb_screen.hz)
  return _internal_hz();
}
inline void pb_screen::_internal_set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hz_ = value;
}
inline void pb_screen::set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:pb_screen.hz)
}

// -------------------------------------------------------------------

// pb_accept

// uint32 index = 1;
inline void pb_accept::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::index() const {
  // @@protoc_insertion_point(field_get:pb_accept.index)
  return _internal_index();
}
inline void pb_accept::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void pb_accept::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb_accept.index)
}

// uint32 res_x = 2;
inline void pb_accept::clear_res_x() {
  res_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_res_x() const {
  return res_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::res_x() const {
  // @@protoc_insertion_point(field_get:pb_accept.res_x)
  return _internal_res_x();
}
inline void pb_accept::_internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_x_ = value;
}
inline void pb_accept::set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_x(value);
  // @@protoc_insertion_point(field_set:pb_accept.res_x)
}

// uint32 res_y = 3;
inline void pb_accept::clear_res_y() {
  res_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_res_y() const {
  return res_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::res_y() const {
  // @@protoc_insertion_point(field_get:pb_accept.res_y)
  return _internal_res_y();
}
inline void pb_accept::_internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_y_ = value;
}
inline void pb_accept::set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_y(value);
  // @@protoc_insertion_point(field_set:pb_accept.res_y)
}

// .pb_pixmap pixmap = 4;
inline void pb_accept::clear_pixmap() {
  pixmap_ = 0;
}
inline ::pb_pixmap pb_accept::_internal_pixmap() const {
  return static_cast< ::pb_pixmap >(pixmap_);
}
inline ::pb_pixmap pb_accept::pixmap() const {
  // @@protoc_insertion_point(field_get:pb_accept.pixmap)
  return _internal_pixmap();
}
inline void pb_accept::_internal_set_pixmap(::pb_pixmap value) {
  
  pixmap_ = value;
}
inline void pb_accept::set_pixmap(::pb_pixmap value) {
  _internal_set_pixmap(value);
  // @@protoc_insertion_point(field_set:pb_accept.pixmap)
}

// -------------------------------------------------------------------

// pb_transport

// uint64 flag = 1;
inline void pb_transport::clear_flag() {
  flag_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::flag() const {
  // @@protoc_insertion_point(field_get:pb_transport.flag)
  return _internal_flag();
}
inline void pb_transport::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  flag_ = value;
}
inline void pb_transport::set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:pb_transport.flag)
}

// uint64 max_bw = 2;
inline void pb_transport::clear_max_bw() {
  max_bw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::_internal_max_bw() const {
  return max_bw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::max_bw() const {
  // @@protoc_insertion_point(field_get:pb_transport.max_bw)
  return _internal_max_bw();
}
inline void pb_transport::_internal_set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_bw_ = value;
}
inline void pb_transport::set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_bw(value);
  // @@protoc_insertion_point(field_set:pb_transport.max_bw)
}

// string ip_addr = 3;
inline void pb_transport::clear_ip_addr() {
  ip_addr_.ClearToEmpty();
}
inline const std::string& pb_transport::ip_addr() const {
  // @@protoc_insertion_point(field_get:pb_transport.ip_addr)
  return _internal_ip_addr();
}
inline void pb_transport::set_ip_addr(const std::string& value) {
  _internal_set_ip_addr(value);
  // @@protoc_insertion_point(field_set:pb_transport.ip_addr)
}
inline std::string* pb_transport::mutable_ip_addr() {
  // @@protoc_insertion_point(field_mutable:pb_transport.ip_addr)
  return _internal_mutable_ip_addr();
}
inline const std::string& pb_transport::_internal_ip_addr() const {
  return ip_addr_.Get();
}
inline void pb_transport::_internal_set_ip_addr(const std::string& value) {
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pb_transport::set_ip_addr(std::string&& value) {
  
  ip_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_transport.ip_addr)
}
inline void pb_transport::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb_transport.ip_addr)
}
inline void pb_transport::set_ip_addr(const char* value,
    size_t size) {
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_transport.ip_addr)
}
inline std::string* pb_transport::_internal_mutable_ip_addr() {
  
  return ip_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pb_transport::release_ip_addr() {
  // @@protoc_insertion_point(field_release:pb_transport.ip_addr)
  return ip_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pb_transport::set_allocated_ip_addr(std::string* ip_addr) {
  if (ip_addr != nullptr) {
    
  } else {
    
  }
  ip_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_transport.ip_addr)
}

// string port = 4;
inline void pb_transport::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& pb_transport::port() const {
  // @@protoc_insertion_point(field_get:pb_transport.port)
  return _internal_port();
}
inline void pb_transport::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pb_transport.port)
}
inline std::string* pb_transport::mutable_port() {
  // @@protoc_insertion_point(field_mutable:pb_transport.port)
  return _internal_mutable_port();
}
inline const std::string& pb_transport::_internal_port() const {
  return port_.Get();
}
inline void pb_transport::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pb_transport::set_port(std::string&& value) {
  
  port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_transport.port)
}
inline void pb_transport::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb_transport.port)
}
inline void pb_transport::set_port(const char* value,
    size_t size) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_transport.port)
}
inline std::string* pb_transport::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pb_transport::release_port() {
  // @@protoc_insertion_point(field_release:pb_transport.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pb_transport::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_transport.port)
}

// uint32 netmask = 5;
inline void pb_transport::clear_netmask() {
  netmask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_transport::_internal_netmask() const {
  return netmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_transport::netmask() const {
  // @@protoc_insertion_point(field_get:pb_transport.netmask)
  return _internal_netmask();
}
inline void pb_transport::_internal_set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  netmask_ = value;
}
inline void pb_transport::set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_netmask(value);
  // @@protoc_insertion_point(field_set:pb_transport.netmask)
}

// -------------------------------------------------------------------

// pb_ibv_mr

// uint64 addr = 1;
inline void pb_ibv_mr::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::_internal_addr() const {
  return addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::addr() const {
  // @@protoc_insertion_point(field_get:pb_ibv_mr.addr)
  return _internal_addr();
}
inline void pb_ibv_mr::_internal_set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  addr_ = value;
}
inline void pb_ibv_mr::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:pb_ibv_mr.addr)
}

// uint64 length = 2;
inline void pb_ibv_mr::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::length() const {
  // @@protoc_insertion_point(field_get:pb_ibv_mr.length)
  return _internal_length();
}
inline void pb_ibv_mr::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void pb_ibv_mr::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:pb_ibv_mr.length)
}

// uint32 rkey = 3;
inline void pb_ibv_mr::clear_rkey() {
  rkey_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_ibv_mr::_internal_rkey() const {
  return rkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_ibv_mr::rkey() const {
  // @@protoc_insertion_point(field_get:pb_ibv_mr.rkey)
  return _internal_rkey();
}
inline void pb_ibv_mr::_internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rkey_ = value;
}
inline void pb_ibv_mr::set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rkey(value);
  // @@protoc_insertion_point(field_set:pb_ibv_mr.rkey)
}

// uint64 access_flags = 4;
inline void pb_ibv_mr::clear_access_flags() {
  access_flags_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::_internal_access_flags() const {
  return access_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_ibv_mr::access_flags() const {
  // @@protoc_insertion_point(field_get:pb_ibv_mr.access_flags)
  return _internal_access_flags();
}
inline void pb_ibv_mr::_internal_set_access_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  access_flags_ = value;
}
inline void pb_ibv_mr::set_access_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_access_flags(value);
  // @@protoc_insertion_point(field_set:pb_ibv_mr.access_flags)
}

// -------------------------------------------------------------------

// pb_mr

// uint32 index = 1;
inline void pb_mr::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_mr::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_mr::index() const {
  // @@protoc_insertion_point(field_get:pb_mr.index)
  return _internal_index();
}
inline void pb_mr::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void pb_mr::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb_mr.index)
}

// .pb_ibv_mr ibv_mr = 2;
inline bool pb_mr::_internal_has_ibv_mr() const {
  return mr_data_case() == kIbvMr;
}
inline bool pb_mr::has_ibv_mr() const {
  return _internal_has_ibv_mr();
}
inline void pb_mr::set_has_ibv_mr() {
  _oneof_case_[0] = kIbvMr;
}
inline void pb_mr::clear_ibv_mr() {
  if (_internal_has_ibv_mr()) {
    if (GetArena() == nullptr) {
      delete mr_data_.ibv_mr_;
    }
    clear_has_mr_data();
  }
}
inline ::pb_ibv_mr* pb_mr::release_ibv_mr() {
  // @@protoc_insertion_point(field_release:pb_mr.ibv_mr)
  if (_internal_has_ibv_mr()) {
    clear_has_mr_data();
      ::pb_ibv_mr* temp = mr_data_.ibv_mr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mr_data_.ibv_mr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_ibv_mr& pb_mr::_internal_ibv_mr() const {
  return _internal_has_ibv_mr()
      ? *mr_data_.ibv_mr_
      : reinterpret_cast< ::pb_ibv_mr&>(::_pb_ibv_mr_default_instance_);
}
inline const ::pb_ibv_mr& pb_mr::ibv_mr() const {
  // @@protoc_insertion_point(field_get:pb_mr.ibv_mr)
  return _internal_ibv_mr();
}
inline ::pb_ibv_mr* pb_mr::unsafe_arena_release_ibv_mr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_mr.ibv_mr)
  if (_internal_has_ibv_mr()) {
    clear_has_mr_data();
    ::pb_ibv_mr* temp = mr_data_.ibv_mr_;
    mr_data_.ibv_mr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void pb_mr::unsafe_arena_set_allocated_ibv_mr(::pb_ibv_mr* ibv_mr) {
  clear_mr_data();
  if (ibv_mr) {
    set_has_ibv_mr();
    mr_data_.ibv_mr_ = ibv_mr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_mr.ibv_mr)
}
inline ::pb_ibv_mr* pb_mr::_internal_mutable_ibv_mr() {
  if (!_internal_has_ibv_mr()) {
    clear_mr_data();
    set_has_ibv_mr();
    mr_data_.ibv_mr_ = CreateMaybeMessage< ::pb_ibv_mr >(GetArena());
  }
  return mr_data_.ibv_mr_;
}
inline ::pb_ibv_mr* pb_mr::mutable_ibv_mr() {
  // @@protoc_insertion_point(field_mutable:pb_mr.ibv_mr)
  return _internal_mutable_ibv_mr();
}

inline bool pb_mr::has_mr_data() const {
  return mr_data_case() != MR_DATA_NOT_SET;
}
inline void pb_mr::clear_has_mr_data() {
  _oneof_case_[0] = MR_DATA_NOT_SET;
}
inline pb_mr::MrDataCase pb_mr::mr_data_case() const {
  return pb_mr::MrDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// pb_mr_wrapper

// repeated .pb_mr mr = 1;
inline int pb_mr_wrapper::_internal_mr_size() const {
  return mr_.size();
}
inline int pb_mr_wrapper::mr_size() const {
  return _internal_mr_size();
}
inline void pb_mr_wrapper::clear_mr() {
  mr_.Clear();
}
inline ::pb_mr* pb_mr_wrapper::mutable_mr(int index) {
  // @@protoc_insertion_point(field_mutable:pb_mr_wrapper.mr)
  return mr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_mr >*
pb_mr_wrapper::mutable_mr() {
  // @@protoc_insertion_point(field_mutable_list:pb_mr_wrapper.mr)
  return &mr_;
}
inline const ::pb_mr& pb_mr_wrapper::_internal_mr(int index) const {
  return mr_.Get(index);
}
inline const ::pb_mr& pb_mr_wrapper::mr(int index) const {
  // @@protoc_insertion_point(field_get:pb_mr_wrapper.mr)
  return _internal_mr(index);
}
inline ::pb_mr* pb_mr_wrapper::_internal_add_mr() {
  return mr_.Add();
}
inline ::pb_mr* pb_mr_wrapper::add_mr() {
  // @@protoc_insertion_point(field_add:pb_mr_wrapper.mr)
  return _internal_add_mr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_mr >&
pb_mr_wrapper::mr() const {
  // @@protoc_insertion_point(field_list:pb_mr_wrapper.mr)
  return mr_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_pixmap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_pixmap>() {
  return ::pb_pixmap_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
