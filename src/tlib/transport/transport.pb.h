// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2eproto;
class pb_accept;
class pb_acceptDefaultTypeInternal;
extern pb_acceptDefaultTypeInternal _pb_accept_default_instance_;
class pb_hello;
class pb_helloDefaultTypeInternal;
extern pb_helloDefaultTypeInternal _pb_hello_default_instance_;
class pb_screen;
class pb_screenDefaultTypeInternal;
extern pb_screenDefaultTypeInternal _pb_screen_default_instance_;
class pb_transport;
class pb_transportDefaultTypeInternal;
extern pb_transportDefaultTypeInternal _pb_transport_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_accept* Arena::CreateMaybeMessage<::pb_accept>(Arena*);
template<> ::pb_hello* Arena::CreateMaybeMessage<::pb_hello>(Arena*);
template<> ::pb_screen* Arena::CreateMaybeMessage<::pb_screen>(Arena*);
template<> ::pb_transport* Arena::CreateMaybeMessage<::pb_transport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum pb_pixmap : int {
  z_bgr_888 = 0,
  z_bgra_888 = 1,
  z_rgb_888 = 2,
  z_rgba_8888 = 3,
  pb_pixmap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  pb_pixmap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool pb_pixmap_IsValid(int value);
constexpr pb_pixmap pb_pixmap_MIN = z_bgr_888;
constexpr pb_pixmap pb_pixmap_MAX = z_rgba_8888;
constexpr int pb_pixmap_ARRAYSIZE = pb_pixmap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pb_pixmap_descriptor();
template<typename T>
inline const std::string& pb_pixmap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, pb_pixmap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function pb_pixmap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    pb_pixmap_descriptor(), enum_t_value);
}
inline bool pb_pixmap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, pb_pixmap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<pb_pixmap>(
    pb_pixmap_descriptor(), name, value);
}
// ===================================================================

class pb_hello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_hello) */ {
 public:
  inline pb_hello() : pb_hello(nullptr) {}
  virtual ~pb_hello();

  pb_hello(const pb_hello& from);
  pb_hello(pb_hello&& from) noexcept
    : pb_hello() {
    *this = ::std::move(from);
  }

  inline pb_hello& operator=(const pb_hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_hello& operator=(pb_hello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_hello& default_instance();

  static inline const pb_hello* internal_default_instance() {
    return reinterpret_cast<const pb_hello*>(
               &_pb_hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pb_hello& a, pb_hello& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_hello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_hello* New() const final {
    return CreateMaybeMessage<pb_hello>(nullptr);
  }

  pb_hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_hello& from);
  void MergeFrom(const pb_hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_hello";
  }
  protected:
  explicit pb_hello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportsFieldNumber = 1,
    kScreensFieldNumber = 2,
    kAcceptFieldNumber = 3,
  };
  // repeated .pb_screen transports = 1;
  int transports_size() const;
  private:
  int _internal_transports_size() const;
  public:
  void clear_transports();
  ::pb_screen* mutable_transports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
      mutable_transports();
  private:
  const ::pb_screen& _internal_transports(int index) const;
  ::pb_screen* _internal_add_transports();
  public:
  const ::pb_screen& transports(int index) const;
  ::pb_screen* add_transports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
      transports() const;

  // repeated .pb_transport screens = 2;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::pb_transport* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >*
      mutable_screens();
  private:
  const ::pb_transport& _internal_screens(int index) const;
  ::pb_transport* _internal_add_screens();
  public:
  const ::pb_transport& screens(int index) const;
  ::pb_transport* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >&
      screens() const;

  // repeated .pb_accept accept = 3;
  int accept_size() const;
  private:
  int _internal_accept_size() const;
  public:
  void clear_accept();
  ::pb_accept* mutable_accept(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >*
      mutable_accept();
  private:
  const ::pb_accept& _internal_accept(int index) const;
  ::pb_accept* _internal_add_accept();
  public:
  const ::pb_accept& accept(int index) const;
  ::pb_accept* add_accept();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >&
      accept() const;

  // @@protoc_insertion_point(class_scope:pb_hello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen > transports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport > screens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept > accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_screen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_screen) */ {
 public:
  inline pb_screen() : pb_screen(nullptr) {}
  virtual ~pb_screen();

  pb_screen(const pb_screen& from);
  pb_screen(pb_screen&& from) noexcept
    : pb_screen() {
    *this = ::std::move(from);
  }

  inline pb_screen& operator=(const pb_screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_screen& operator=(pb_screen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_screen& default_instance();

  static inline const pb_screen* internal_default_instance() {
    return reinterpret_cast<const pb_screen*>(
               &_pb_screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pb_screen& a, pb_screen& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_screen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_screen* New() const final {
    return CreateMaybeMessage<pb_screen>(nullptr);
  }

  pb_screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_screen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_screen& from);
  void MergeFrom(const pb_screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_screen";
  }
  protected:
  explicit pb_screen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kResXFieldNumber = 2,
    kResYFieldNumber = 3,
    kPixmapFieldNumber = 4,
    kHzFieldNumber = 5,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_x = 2;
  void clear_res_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x() const;
  void set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_x() const;
  void _internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_y = 3;
  void clear_res_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y() const;
  void set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_y() const;
  void _internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb_pixmap pixmap = 4;
  void clear_pixmap();
  ::pb_pixmap pixmap() const;
  void set_pixmap(::pb_pixmap value);
  private:
  ::pb_pixmap _internal_pixmap() const;
  void _internal_set_pixmap(::pb_pixmap value);
  public:

  // uint32 hz = 5;
  void clear_hz();
  ::PROTOBUF_NAMESPACE_ID::uint32 hz() const;
  void set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hz() const;
  void _internal_set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y_;
  int pixmap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_accept PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_accept) */ {
 public:
  inline pb_accept() : pb_accept(nullptr) {}
  virtual ~pb_accept();

  pb_accept(const pb_accept& from);
  pb_accept(pb_accept&& from) noexcept
    : pb_accept() {
    *this = ::std::move(from);
  }

  inline pb_accept& operator=(const pb_accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_accept& operator=(pb_accept&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_accept& default_instance();

  static inline const pb_accept* internal_default_instance() {
    return reinterpret_cast<const pb_accept*>(
               &_pb_accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pb_accept& a, pb_accept& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_accept* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_accept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_accept* New() const final {
    return CreateMaybeMessage<pb_accept>(nullptr);
  }

  pb_accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_accept& from);
  void MergeFrom(const pb_accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_accept";
  }
  protected:
  explicit pb_accept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kResXFieldNumber = 2,
    kResYFieldNumber = 3,
    kPixmapFieldNumber = 4,
  };
  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_x = 2;
  void clear_res_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x() const;
  void set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_x() const;
  void _internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 res_y = 3;
  void clear_res_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y() const;
  void set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_y() const;
  void _internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb_pixmap pixmap = 4;
  void clear_pixmap();
  ::pb_pixmap pixmap() const;
  void set_pixmap(::pb_pixmap value);
  private:
  ::pb_pixmap _internal_pixmap() const;
  void _internal_set_pixmap(::pb_pixmap value);
  public:

  // @@protoc_insertion_point(class_scope:pb_accept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_y_;
  int pixmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class pb_transport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_transport) */ {
 public:
  inline pb_transport() : pb_transport(nullptr) {}
  virtual ~pb_transport();

  pb_transport(const pb_transport& from);
  pb_transport(pb_transport&& from) noexcept
    : pb_transport() {
    *this = ::std::move(from);
  }

  inline pb_transport& operator=(const pb_transport& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_transport& operator=(pb_transport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_transport& default_instance();

  static inline const pb_transport* internal_default_instance() {
    return reinterpret_cast<const pb_transport*>(
               &_pb_transport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(pb_transport& a, pb_transport& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_transport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_transport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_transport* New() const final {
    return CreateMaybeMessage<pb_transport>(nullptr);
  }

  pb_transport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_transport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_transport& from);
  void MergeFrom(const pb_transport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_transport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_transport";
  }
  protected:
  explicit pb_transport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrFieldNumber = 3,
    kFlagFieldNumber = 1,
    kMaxBwFieldNumber = 2,
    kNetmaskFieldNumber = 4,
  };
  // string ip_addr = 3;
  void clear_ip_addr();
  const std::string& ip_addr() const;
  void set_ip_addr(const std::string& value);
  void set_ip_addr(std::string&& value);
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  std::string* mutable_ip_addr();
  std::string* release_ip_addr();
  void set_allocated_ip_addr(std::string* ip_addr);
  private:
  const std::string& _internal_ip_addr() const;
  void _internal_set_ip_addr(const std::string& value);
  std::string* _internal_mutable_ip_addr();
  public:

  // uint64 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_bw = 2;
  void clear_max_bw();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bw() const;
  void set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_bw() const;
  void _internal_set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 netmask = 4;
  void clear_netmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 netmask() const;
  void set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_netmask() const;
  void _internal_set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_transport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 netmask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pb_hello

// repeated .pb_screen transports = 1;
inline int pb_hello::_internal_transports_size() const {
  return transports_.size();
}
inline int pb_hello::transports_size() const {
  return _internal_transports_size();
}
inline void pb_hello::clear_transports() {
  transports_.Clear();
}
inline ::pb_screen* pb_hello::mutable_transports(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.transports)
  return transports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >*
pb_hello::mutable_transports() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.transports)
  return &transports_;
}
inline const ::pb_screen& pb_hello::_internal_transports(int index) const {
  return transports_.Get(index);
}
inline const ::pb_screen& pb_hello::transports(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.transports)
  return _internal_transports(index);
}
inline ::pb_screen* pb_hello::_internal_add_transports() {
  return transports_.Add();
}
inline ::pb_screen* pb_hello::add_transports() {
  // @@protoc_insertion_point(field_add:pb_hello.transports)
  return _internal_add_transports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_screen >&
pb_hello::transports() const {
  // @@protoc_insertion_point(field_list:pb_hello.transports)
  return transports_;
}

// repeated .pb_transport screens = 2;
inline int pb_hello::_internal_screens_size() const {
  return screens_.size();
}
inline int pb_hello::screens_size() const {
  return _internal_screens_size();
}
inline void pb_hello::clear_screens() {
  screens_.Clear();
}
inline ::pb_transport* pb_hello::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.screens)
  return screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >*
pb_hello::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.screens)
  return &screens_;
}
inline const ::pb_transport& pb_hello::_internal_screens(int index) const {
  return screens_.Get(index);
}
inline const ::pb_transport& pb_hello::screens(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.screens)
  return _internal_screens(index);
}
inline ::pb_transport* pb_hello::_internal_add_screens() {
  return screens_.Add();
}
inline ::pb_transport* pb_hello::add_screens() {
  // @@protoc_insertion_point(field_add:pb_hello.screens)
  return _internal_add_screens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_transport >&
pb_hello::screens() const {
  // @@protoc_insertion_point(field_list:pb_hello.screens)
  return screens_;
}

// repeated .pb_accept accept = 3;
inline int pb_hello::_internal_accept_size() const {
  return accept_.size();
}
inline int pb_hello::accept_size() const {
  return _internal_accept_size();
}
inline void pb_hello::clear_accept() {
  accept_.Clear();
}
inline ::pb_accept* pb_hello::mutable_accept(int index) {
  // @@protoc_insertion_point(field_mutable:pb_hello.accept)
  return accept_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >*
pb_hello::mutable_accept() {
  // @@protoc_insertion_point(field_mutable_list:pb_hello.accept)
  return &accept_;
}
inline const ::pb_accept& pb_hello::_internal_accept(int index) const {
  return accept_.Get(index);
}
inline const ::pb_accept& pb_hello::accept(int index) const {
  // @@protoc_insertion_point(field_get:pb_hello.accept)
  return _internal_accept(index);
}
inline ::pb_accept* pb_hello::_internal_add_accept() {
  return accept_.Add();
}
inline ::pb_accept* pb_hello::add_accept() {
  // @@protoc_insertion_point(field_add:pb_hello.accept)
  return _internal_add_accept();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_accept >&
pb_hello::accept() const {
  // @@protoc_insertion_point(field_list:pb_hello.accept)
  return accept_;
}

// -------------------------------------------------------------------

// pb_screen

// uint32 index = 1;
inline void pb_screen::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::index() const {
  // @@protoc_insertion_point(field_get:pb_screen.index)
  return _internal_index();
}
inline void pb_screen::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void pb_screen::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb_screen.index)
}

// uint32 res_x = 2;
inline void pb_screen::clear_res_x() {
  res_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_res_x() const {
  return res_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::res_x() const {
  // @@protoc_insertion_point(field_get:pb_screen.res_x)
  return _internal_res_x();
}
inline void pb_screen::_internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_x_ = value;
}
inline void pb_screen::set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_x(value);
  // @@protoc_insertion_point(field_set:pb_screen.res_x)
}

// uint32 res_y = 3;
inline void pb_screen::clear_res_y() {
  res_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_res_y() const {
  return res_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::res_y() const {
  // @@protoc_insertion_point(field_get:pb_screen.res_y)
  return _internal_res_y();
}
inline void pb_screen::_internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_y_ = value;
}
inline void pb_screen::set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_y(value);
  // @@protoc_insertion_point(field_set:pb_screen.res_y)
}

// .pb_pixmap pixmap = 4;
inline void pb_screen::clear_pixmap() {
  pixmap_ = 0;
}
inline ::pb_pixmap pb_screen::_internal_pixmap() const {
  return static_cast< ::pb_pixmap >(pixmap_);
}
inline ::pb_pixmap pb_screen::pixmap() const {
  // @@protoc_insertion_point(field_get:pb_screen.pixmap)
  return _internal_pixmap();
}
inline void pb_screen::_internal_set_pixmap(::pb_pixmap value) {
  
  pixmap_ = value;
}
inline void pb_screen::set_pixmap(::pb_pixmap value) {
  _internal_set_pixmap(value);
  // @@protoc_insertion_point(field_set:pb_screen.pixmap)
}

// uint32 hz = 5;
inline void pb_screen::clear_hz() {
  hz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::_internal_hz() const {
  return hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_screen::hz() const {
  // @@protoc_insertion_point(field_get:pb_screen.hz)
  return _internal_hz();
}
inline void pb_screen::_internal_set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hz_ = value;
}
inline void pb_screen::set_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:pb_screen.hz)
}

// -------------------------------------------------------------------

// pb_accept

// uint32 index = 1;
inline void pb_accept::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::index() const {
  // @@protoc_insertion_point(field_get:pb_accept.index)
  return _internal_index();
}
inline void pb_accept::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void pb_accept::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb_accept.index)
}

// uint32 res_x = 2;
inline void pb_accept::clear_res_x() {
  res_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_res_x() const {
  return res_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::res_x() const {
  // @@protoc_insertion_point(field_get:pb_accept.res_x)
  return _internal_res_x();
}
inline void pb_accept::_internal_set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_x_ = value;
}
inline void pb_accept::set_res_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_x(value);
  // @@protoc_insertion_point(field_set:pb_accept.res_x)
}

// uint32 res_y = 3;
inline void pb_accept::clear_res_y() {
  res_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::_internal_res_y() const {
  return res_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_accept::res_y() const {
  // @@protoc_insertion_point(field_get:pb_accept.res_y)
  return _internal_res_y();
}
inline void pb_accept::_internal_set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_y_ = value;
}
inline void pb_accept::set_res_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_y(value);
  // @@protoc_insertion_point(field_set:pb_accept.res_y)
}

// .pb_pixmap pixmap = 4;
inline void pb_accept::clear_pixmap() {
  pixmap_ = 0;
}
inline ::pb_pixmap pb_accept::_internal_pixmap() const {
  return static_cast< ::pb_pixmap >(pixmap_);
}
inline ::pb_pixmap pb_accept::pixmap() const {
  // @@protoc_insertion_point(field_get:pb_accept.pixmap)
  return _internal_pixmap();
}
inline void pb_accept::_internal_set_pixmap(::pb_pixmap value) {
  
  pixmap_ = value;
}
inline void pb_accept::set_pixmap(::pb_pixmap value) {
  _internal_set_pixmap(value);
  // @@protoc_insertion_point(field_set:pb_accept.pixmap)
}

// -------------------------------------------------------------------

// pb_transport

// uint64 flag = 1;
inline void pb_transport::clear_flag() {
  flag_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::flag() const {
  // @@protoc_insertion_point(field_get:pb_transport.flag)
  return _internal_flag();
}
inline void pb_transport::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  flag_ = value;
}
inline void pb_transport::set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:pb_transport.flag)
}

// uint64 max_bw = 2;
inline void pb_transport::clear_max_bw() {
  max_bw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::_internal_max_bw() const {
  return max_bw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pb_transport::max_bw() const {
  // @@protoc_insertion_point(field_get:pb_transport.max_bw)
  return _internal_max_bw();
}
inline void pb_transport::_internal_set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_bw_ = value;
}
inline void pb_transport::set_max_bw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_bw(value);
  // @@protoc_insertion_point(field_set:pb_transport.max_bw)
}

// string ip_addr = 3;
inline void pb_transport::clear_ip_addr() {
  ip_addr_.ClearToEmpty();
}
inline const std::string& pb_transport::ip_addr() const {
  // @@protoc_insertion_point(field_get:pb_transport.ip_addr)
  return _internal_ip_addr();
}
inline void pb_transport::set_ip_addr(const std::string& value) {
  _internal_set_ip_addr(value);
  // @@protoc_insertion_point(field_set:pb_transport.ip_addr)
}
inline std::string* pb_transport::mutable_ip_addr() {
  // @@protoc_insertion_point(field_mutable:pb_transport.ip_addr)
  return _internal_mutable_ip_addr();
}
inline const std::string& pb_transport::_internal_ip_addr() const {
  return ip_addr_.Get();
}
inline void pb_transport::_internal_set_ip_addr(const std::string& value) {
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pb_transport::set_ip_addr(std::string&& value) {
  
  ip_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_transport.ip_addr)
}
inline void pb_transport::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb_transport.ip_addr)
}
inline void pb_transport::set_ip_addr(const char* value,
    size_t size) {
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_transport.ip_addr)
}
inline std::string* pb_transport::_internal_mutable_ip_addr() {
  
  return ip_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pb_transport::release_ip_addr() {
  // @@protoc_insertion_point(field_release:pb_transport.ip_addr)
  return ip_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pb_transport::set_allocated_ip_addr(std::string* ip_addr) {
  if (ip_addr != nullptr) {
    
  } else {
    
  }
  ip_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_transport.ip_addr)
}

// uint32 netmask = 4;
inline void pb_transport::clear_netmask() {
  netmask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_transport::_internal_netmask() const {
  return netmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pb_transport::netmask() const {
  // @@protoc_insertion_point(field_get:pb_transport.netmask)
  return _internal_netmask();
}
inline void pb_transport::_internal_set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  netmask_ = value;
}
inline void pb_transport::set_netmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_netmask(value);
  // @@protoc_insertion_point(field_set:pb_transport.netmask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_pixmap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_pixmap>() {
  return ::pb_pixmap_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
